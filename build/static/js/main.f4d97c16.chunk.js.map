{"version":3,"sources":["components/Editor.js","Socket.js","hooks/useLocalStorage.js","components/App.js","index.js"],"names":["Editor","props","language","displayName","value","onChange","socket","setHtml","setCss","setJs","useState","open","setOpen","useEffect","on","data","html","css","js","emit","className","type","onClick","prevOpen","icon","faCompressAlt","faExpandAlt","onBeforeChange","editor","options","lineWrapping","lint","mode","theme","lineNumbers","io","useLocalStorage","key","initialValue","prefixedKey","jsonValue","localStorage","getItem","JSON","parse","setValue","setItem","stringify","App","srcDoc","setSrcDoc","connected","timeout","setTimeout","clearTimeout","title","sandbox","frameBorder","width","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f4d97c16.chunk.js","sourcesContent":["import React, { useState, useEffect} from 'react'\nimport 'codemirror/lib/codemirror.css'\nimport 'codemirror/theme/material.css'\nimport 'codemirror/mode/xml/xml'\nimport 'codemirror/mode/javascript/javascript'\nimport 'codemirror/mode/css/css'\nimport { Controlled as ControlledEditor } from 'react-codemirror2'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCompressAlt, faExpandAlt } from '@fortawesome/free-solid-svg-icons'\n\nexport default function Editor(props) {\n  const {\n    language,\n    displayName,\n    value,\n    onChange,\n    socket, \n    setHtml,\n    setCss,\n    setJs,\n  } = props;\n\n  const [open, setOpen] = useState(true);\n  useEffect(() => {\n    socket.on('code-update', (data) => {\n      setHtml(data.html);\n      setCss(data.css);\n      setJs(data.js);\n      socket.emit('code-update', { data});\n    });\n    // const { html, css, js } = props; \n\n  }, []);\n\n  // Handle code changes when a user interacts with the editor\n  function handleChange(editor, data, value) {\n    onChange(value);\n   \n    const { html, css, js } = props; \n    // Emit code changes to be shared with other connected clients\n    socket.emit('code-update', { html, css, js });\n  }\n\n\n  return (\n    <div className={`editor-container ${open ? '' : 'collapsed'}`}>\n      <div className=\"editor-title\">\n        {displayName}\n        <button\n          type=\"button\"\n          className=\"expand-collapse-btn\"\n          onClick={() => setOpen(prevOpen => !prevOpen)}\n        >\n          <FontAwesomeIcon icon={open ? faCompressAlt : faExpandAlt} />\n        </button>\n      </div>\n      <ControlledEditor\n        onBeforeChange={handleChange}\n        value={value}\n        className=\"code-mirror-wrapper\"\n        socket={socket}\n        options={{\n          lineWrapping: true,\n          lint: true,\n          mode: language,\n          theme: 'material',\n          lineNumbers: true\n        }}\n      />\n    </div>\n  )\n}\n","import { io } from 'socket.io-client';\n\n// const URL = process.env.NODE_ENV === 'production' ? undefined : 'http://localhost:3001';\n\nexport const socket = io(); // Export the 'socket' variable\n\n","import { useEffect, useState } from 'react'\n\nconst PREFIX = 'codepen-clone-'\n\nexport default function useLocalStorage(key, initialValue) {\n  const prefixedKey = PREFIX + key\n\n  const [value, setValue] = useState(() => {\n    const jsonValue = localStorage.getItem(prefixedKey)\n    if (jsonValue != null) return JSON.parse(jsonValue)\n\n    if (typeof initialValue === 'function') {\n      return initialValue()\n    } else {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(prefixedKey, JSON.stringify(value))\n  }, [prefixedKey, value])\n\n  return [value, setValue]\n}\n","import React, { useState, useEffect } from 'react';\nimport Editor from './Editor'\nimport { socket } from '../Socket';\nimport useLocalStorage from '../hooks/useLocalStorage'\nimport { io } from 'socket.io-client'; // Import the socket.io-client library\n\n\n\nfunction App() {\n  const [html, setHtml] = useLocalStorage('html', '')\n  const [css, setCss] = useLocalStorage('css', '')\n  const [js, setJs] = useLocalStorage('js', '')\n  const [srcDoc, setSrcDoc] = useState('')\n  const [isConnected, setIsConnected] = useState(socket.connected);\n  const [fooEvents, setFooEvents] = useState([]);\n  useEffect(() => {\n    socket.emit('code-update', { html, css, js });\n    const timeout = setTimeout(() => {\n      setSrcDoc(`\n        <html>\n          <body>${html}</body>\n          <style>${css}</style>\n          <script>${js}</script>\n        </html>\n      `)\n    }, 150);\n  \n    return () => clearTimeout(timeout);\n  }, [html, css, js]);\n\n\n  return (\n    <>\n    <div className=\"cont\">\n\n      <div className=\"pane top-pane\">\n        <Editor\n          language=\"xml\"\n          displayName=\"HTML\"\n          value={html}\n          onChange={setHtml}\n          socket={socket}\n        />\n        <Editor\n          language=\"css\"\n          displayName=\"CSS\"\n          value={css}\n          onChange={setCss}\n          socket={socket}\n        />\n        <Editor\n          language=\"javascript\"\n          displayName=\"JS\"\n          value={js}\n          onChange={setJs}\n          socket={socket}\n        />\n      </div>\n      <div className=\"pane\">\n        <iframe\n          socket={socket}\n          srcDoc={srcDoc}\n          title=\"output\"\n          sandbox=\"allow-scripts\"\n          frameBorder=\"0\"\n          width=\"100%\"\n          height=\"100%\"\n        />\n      </div>\n    </div> \n    </>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}